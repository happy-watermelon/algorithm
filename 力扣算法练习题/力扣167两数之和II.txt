两数之和II(暴力法-->二分法-->双指针)

解题思路
第一时间像我这种弱鸡,当然是先用暴力法解决,两次循环 执行用时1000ms
然后优化,对第二次循环进行二分,执行用时3ms
然后打开评论区,看到双指针的做法,恍然大悟,感觉自己像啥b,执行用时1ms

双指针的做法思路:
数组的首尾各定义一个指针,因为数组是非递减数组
判断指针和sum与target的大小关系
相等的话直接返回指针的index
如果比target小,说明要让sum变大,那么数组首位的指针++
如果比target大,说明要让sum变小,那么数组尾的指针--;

代码
双指针:


class Solution {
    public int[] twoSum(int[] numbers, int target) {
        for(int i=0,j=numbers.length-1;i<j;){
            int sum=numbers[i]+numbers[j];
            if(target==sum) 
                return new int []{i+1,j+1};
            else if(target<sum)
                j--;
            else
                i++;
        }
        return null;
    }
}
二分法:
```java
 public int[] twoSum(int[] numbers, int target) {
           for(int i=0;i<numbers.length;i++){
               if(numbers[i]>target&&target>0)
               break;
               int left=0;
               int right=numbers.length-1;
               while(left<=right){
                   int mid=left+((right-left)>>1);
                   int sum=numbers[i]+numbers[mid];
                   if(sum==target)
                        if(i!=mid)
                        return new int[]{i+1,mid+1};
                        else
                        left=mid+1;
                    else if(sum>target)
                        right=mid-1;
                    else if(sum<target)
                        left=mid+1;
               }
           }
           return new int[]{-1,-1};
    }
}
暴力法
```java
class Solution {
    public int[] twoSum(int[] numbers, int target) {
           for(int i=0;i<numbers.length;i++){
               for(int j=0;j<numbers.length;j++){
                   if(numbers[i]+numbers[j]==target&&i!=j)
                        return new int[]{i+1,j+1};
                    else if(numbers[i]+numbers[j]>target)
                        break;
               }
           }
           return new int[]{-1,-1};
    }
}